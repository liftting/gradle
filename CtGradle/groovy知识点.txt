1, 动态类型
java编译器 在编译时，就会对一些类型的异常进行检查，处理，
优点：
1） 多态的特性， 编译时不用类型转换，运行时自动适配，
2） 没有太多的强制类型转换 ，来让编译通过


2,动态类型，能力方式设计
如果我们要操作  take() 这个通用的功能，那一般会设计成一个接口
interface Move {
void take();
}

别人来实现这个接口，即可，
但假设我们要能做很多事情，那就需要扩展接口，修改依赖的接口代码

》》》 那么对于Groovy，动态类型，
def myMove(helper){
    helper.take();
}

因为默认类型是Object，
那么任何 只要实现该方法，  不需要 实现或 扩展任何接口，



